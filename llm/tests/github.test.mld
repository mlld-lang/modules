> Comprehensive testing of @mlld/github module

/import { ok, notOk, eq, deepEq, contains, throws, len } from @local/test
/import { github } from @local/github
/import { MLLD_GITHUB_TOKEN } from @input

## Module Structure Tests

>> Verify main github object exists
/var @test_github_exists = @ok(@github)

>> Check github has all expected sub-objects
/var @test_has_pr = @ok(@github.pr)
/var @test_has_issue = @ok(@github.issue)
/var @test_has_repo = @ok(@github.repo)
/var @test_has_collab = @ok(@github.collab)
/var @test_has_workflow = @ok(@github.workflow)

## Testing PR operations structure

>> Check PR object has all methods including new pr.files
/var @test_pr_has_view = @ok(@github.pr.view)
/var @test_pr_has_files = @ok(@github.pr.files)
/var @test_pr_has_diff = @ok(@github.pr.diff)
/var @test_pr_has_list = @ok(@github.pr.list)
/var @test_pr_has_comment = @ok(@github.pr.comment)
/var @test_pr_has_review = @ok(@github.pr.review)
/var @test_pr_has_edit = @ok(@github.pr.edit)

## Testing Issue operations structure

>> Check Issue object has all methods
/var @test_issue_has_create = @ok(@github.issue.create)
/var @test_issue_has_list = @ok(@github.issue.list)
/var @test_issue_has_comment = @ok(@github.issue.comment)

## Testing Repo operations structure

>> Check Repo object has all methods
/var @test_repo_has_view = @ok(@github.repo.view)
/var @test_repo_has_clone = @ok(@github.repo.clone)

## Testing Collab operations structure

>> Check Collab object has all methods
/var @test_collab_has_check = @ok(@github.collab.check)

## Testing Workflow operations structure

>> Check Workflow object has all methods
/var @test_workflow_has_run = @ok(@github.workflow.run)
/var @test_workflow_has_list = @ok(@github.workflow.list)

## Testing executable nature

/exe @isExecutable(@val) = js { 
  return (val && val['**executable'] === true) ? "true" : ""; 
}

>> PR methods should be executables
/var @test_pr_view_is_executable = @ok(@isExecutable(@github.pr.view))
/var @test_pr_files_is_executable = @ok(@isExecutable(@github.pr.files))
/var @test_pr_diff_is_executable = @ok(@isExecutable(@github.pr.diff))
/var @test_pr_list_is_executable = @ok(@isExecutable(@github.pr.list))
/var @test_pr_comment_is_executable = @ok(@isExecutable(@github.pr.comment))
/var @test_pr_review_is_executable = @ok(@isExecutable(@github.pr.review))
/var @test_pr_edit_is_executable = @ok(@isExecutable(@github.pr.edit))

>> Issue methods should be executables
/var @test_issue_create_is_executable = @ok(@isExecutable(@github.issue.create))
/var @test_issue_list_is_executable = @ok(@isExecutable(@github.issue.list))
/var @test_issue_comment_is_executable = @ok(@isExecutable(@github.issue.comment))

>> Repo methods should be executables
/var @test_repo_view_is_executable = @ok(@isExecutable(@github.repo.view))
/var @test_repo_clone_is_executable = @ok(@isExecutable(@github.repo.clone))

>> Collab methods should be executables
/var @test_collab_check_is_executable = @ok(@isExecutable(@github.collab.check))

>> Workflow methods should be executables
/var @test_workflow_run_is_executable = @ok(@isExecutable(@github.workflow.run))
/var @test_workflow_list_is_executable = @ok(@isExecutable(@github.workflow.list))

## Testing object structure

/exe @countProperties(@obj) = js {
  return Object.keys(obj).length;
}

/var @test_github_has_5_categories = @eq(@countProperties(@github), 5)
/var @test_pr_has_7_methods = @eq(@countProperties(@github.pr), 7)
/var @test_issue_has_3_methods = @eq(@countProperties(@github.issue), 3)
/var @test_repo_has_2_methods = @eq(@countProperties(@github.repo), 2)
/var @test_collab_has_1_method = @eq(@countProperties(@github.collab), 1)
/var @test_workflow_has_2_methods = @eq(@countProperties(@github.workflow), 2)

## Integration Tests with Real API

>> Helper functions
/exe @hasError(@obj) = js {
  return obj && obj.error ? "true" : "";
}

/exe @isArray(@val) = js {
  return Array.isArray(val) ? "true" : "";
}

### Test repository operations
/var @repo = @github.repo.view("mlld-lang/registry", "name,owner,description")
/var @test_repo_no_error = @notOk(@hasError(@repo))

>> Verify repo.view returns documented fields
/var @test_repo_has_name = @ok(@repo.name)
/var @test_repo_has_full_name = @ok(@repo.full_name)
/var @test_repo_has_description = @ok(@repo.description !== undefined)
/var @test_repo_has_owner = @ok(@repo.owner)
/var @test_repo_has_owner_login = @ok(@repo.owner.login)
/var @test_repo_has_owner_id = @ok(@repo.owner.id)
/var @test_repo_name_value = @eq(@repo.name, "registry")
/var @test_repo_owner_login_value = @eq(@repo.owner.login, "mlld-lang")

### Test PR operations with known PR
/var @pr = @github.pr.view(82, "mlld-lang/registry")
/var @test_pr_no_error = @notOk(@hasError(@pr))

>> Verify pr.view returns documented fields
/var @test_pr_has_number = @ok(@pr.number)
/var @test_pr_has_title = @ok(@pr.title)
/var @test_pr_has_state = @ok(@pr.state)
/var @test_pr_has_author = @ok(@pr.author)
/var @test_pr_has_author_login = @ok(@pr.author.login)
/var @test_pr_has_body = @ok(@pr.body !== undefined)
/var @test_pr_has_created_at = @ok(@pr.created_at)
/var @test_pr_has_updated_at = @ok(@pr.updated_at)
/var @test_pr_has_head = @ok(@pr.head)
/var @test_pr_has_base = @ok(@pr.base)
/var @test_pr_number_value = @eq(@pr.number, 82)
/var @test_pr_state_value = @contains(["open", "closed", "merged"], @pr.state)

### Test PR files (NEW - with filename vs path check)
/var @files = @github.pr.files(82, "mlld-lang/registry")
/var @test_files_no_error = @notOk(@hasError(@files))
/var @test_files_is_array = @ok(@isArray(@files))

>> Verify pr.files returns array of documented file objects
/when @files.0 => /var @test_file_has_filename = @ok(@files.0.filename)
/when @files.0 => /var @test_file_not_path = @notOk(@files.0.path)
/when @files.0 => /var @test_file_has_status = @ok(@files.0.status)
/when @files.0 => /var @test_file_has_additions = @ok(@files.0.additions !== undefined)
/when @files.0 => /var @test_file_has_deletions = @ok(@files.0.deletions !== undefined)
/when @files.0 => /var @test_file_has_changes = @ok(@files.0.changes !== undefined)
/when @files.0 => /var @test_file_has_blob_url = @ok(@files.0.blob_url)
/when @files.0 => /var @test_file_has_raw_url = @ok(@files.0.raw_url)
/when @files.0 => /var @test_file_has_contents_url = @ok(@files.0.contents_url)
/when @files.0 => /var @test_file_has_patch = @ok(@files.0.patch !== undefined)
/when @files.0 => /var @test_file_has_sha = @ok(@files.0.sha)
/when @files.0 => /var @test_file_status_valid = @contains(["added", "removed", "modified", "renamed"], @files.0.status)

### Test PR diff
/var @diff = @github.pr.diff(82, "mlld-lang/registry")
/var @test_diff_no_error = @notOk(@hasError(@diff))
/var @test_diff_is_string = @eq(typeof @diff, "string")
/var @test_diff_contains_header = @contains(@diff, "diff --git")

### Test issue listing
/var @issues = @github.issue.list("mlld-lang/registry", "--state all --limit 5")
/var @test_issues_no_error = @notOk(@hasError(@issues))
/var @test_issues_is_array = @ok(@isArray(@issues))

>> Verify issue.list returns array of documented issue objects
/when @issues.0 => /var @test_issue_has_number = @ok(@issues.0.number)
/when @issues.0 => /var @test_issue_has_title = @ok(@issues.0.title)
/when @issues.0 => /var @test_issue_has_state = @ok(@issues.0.state)
/when @issues.0 => /var @test_issue_has_labels = @ok(@isArray(@issues.0.labels))
/when @issues.0 => /var @test_issue_has_assignees = @ok(@isArray(@issues.0.assignees))
/when @issues.0 => /var @test_issue_has_created_at = @ok(@issues.0.created_at)
/when @issues.0 => /var @test_issue_has_updated_at = @ok(@issues.0.updated_at)
/when @issues.0 => /var @test_issue_state_valid = @contains(["open", "closed"], @issues.0.state)

### Test collaborator check (returns boolean)
/var @collab_check = @github.collab.check("adamavenir", "mlld-lang/registry")
/var @test_collab_no_error = @notOk(@hasError(@collab_check))
>> Verify collab.check returns boolean (true/false string for mlld)
/var @test_collab_is_boolean = @ok(@contains(["true", "false", ""], @collab_check))

## Error Handling Tests

>> Test nonexistent repository
/var @not_found = @github.repo.view("mlld-lang/does-not-exist-xyz-123")
/var @test_404_error = @ok(@hasError(@not_found))
/var @test_404_message = @contains(@not_found.error, "404")

>> Test invalid PR number
/var @invalid_pr = @github.pr.view(999999, "mlld-lang/registry")
/var @test_invalid_pr_error = @ok(@hasError(@invalid_pr))

## Shadow Environment Tests

>> Verify github_request is available in shadow environment
/var @shadow_test = js {
  const checks = {
    github_request: typeof github_request === 'function',
    pr_view: typeof pr_view === 'function', 
    pr_files: typeof pr_files === 'function',
    pr_diff: typeof pr_diff === 'function',
    issue_list: typeof issue_list === 'function',
    repo_view: typeof repo_view === 'function'
  };
  return checks;
}

/var @test_shadow_github_request = @ok(@shadow_test.github_request)
/var @test_shadow_pr_view = @ok(@shadow_test.pr_view)
/var @test_shadow_pr_files = @ok(@shadow_test.pr_files)
/var @test_shadow_pr_diff = @ok(@shadow_test.pr_diff)
/var @test_shadow_issue_list = @ok(@shadow_test.issue_list)
/var @test_shadow_repo_view = @ok(@shadow_test.repo_view)

## Token Management Tests

/exe @getTokenSource() = js {
  const token = process.env.GITHUB_TOKEN || process.env.MLLD_GITHUB_TOKEN;
  if (token) {
    return token.startsWith('ghp_') || token.startsWith('ghs_') ? 'valid-format' : 'invalid-format';
  }
  return 'no-token';
}

/var @token_status = @getTokenSource()
/var @test_token_available = @notOk(@eq(@token_status, 'no-token'))
/var @test_token_format = @eq(@token_status, 'valid-format')

## Summary

/show "=== GitHub Module Test Summary ==="
/show "✓ Module structure verified"
/show "✓ All methods exist as executables"
/show "✓ Integration tests completed"
/show "✓ Error handling verified"
/show "✓ Shadow environment validated"
/show "✓ PR files returns 'filename' not 'path'"