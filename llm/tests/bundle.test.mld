>> Tests for @mlld/bundle module

/import { ok, eq, includes } from "../modules/test.mld.md"
/import { module } from "../modules/bundle.mld.md"

## Test module structure
/var @test_module_exists = @ok(@module)
/var @test_module_is_object = @ok(typeof @module === "object")
/var @test_has_xml = @ok(@module.xml)
/var @test_has_md = @ok(@module.md)
/var @test_has_tree = @ok(@module.tree)

## Test function types
/var @test_xml_is_function = @eq(typeof @module.xml, "function")
/var @test_md_is_function = @eq(typeof @module.md, "function")
/var @test_tree_is_function = @eq(typeof @module.tree, "function")

## Create test directory structure
/run {mkdir -p /tmp/bundle-test/src /tmp/bundle-test/docs}
/output "export const hello = () => 'Hello World';" to "/tmp/bundle-test/src/hello.js"
/output "export const goodbye = () => 'Goodbye';" to "/tmp/bundle-test/src/goodbye.js"
/output "# Documentation\n\nThis is a test file." to "/tmp/bundle-test/docs/README.md"

## Test XML bundling
/var @xmlResult = @module.xml("/tmp/bundle-test/src")
/var @test_xml_returns_string = @ok(typeof @xmlResult === "string")
/var @test_xml_has_src_tag = @includes(@xmlResult, "<SRC>")
/var @test_xml_has_hello_js = @includes(@xmlResult, "<HELLO_JS")
/var @test_xml_has_content = @includes(@xmlResult, "Hello World")

## Test Markdown bundling
/var @mdResult = @module.md("/tmp/bundle-test/docs")
/var @test_md_returns_string = @ok(typeof @mdResult === "string")
/var @test_md_has_header = @includes(@mdResult, "# docs")
/var @test_md_has_readme = @includes(@mdResult, "## README.md")
/var @test_md_has_content = @includes(@mdResult, "This is a test file")

## Test tree command
/var @treeResult = @module.tree("/tmp/bundle-test")
/var @test_tree_returns_string = @ok(typeof @treeResult === "string")
/var @test_tree_has_src = @includes(@treeResult, "src")
/var @test_tree_has_docs = @includes(@treeResult, "docs")

## Cleanup
/run {rm -rf /tmp/bundle-test}