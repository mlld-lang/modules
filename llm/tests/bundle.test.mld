>> Tests for @mlld/bundle module

/import { * } from "../modules/test.mld.md"
/import { * } from "../modules/bundle.mld.md"

>>  Create test mlld files for bundling
/var @mainFile = [[
/import { helper1, helper2 } from "./utils.mld"
/import { feature } from "./feature.mld"

/var @greeting = "Hello from main"
@run @helper1()
@run @feature()
]
@output @mainFile to "/tmp/bundle-test/main.mld"

/var @utilsFile = [[
/exe @helper1() = js {(
  console.log("Helper 1 called");
  return true;
)}

/exe @helper2() = js {(
  console.log("Helper 2 called");
  return true;
)}

/var @utilsVersion = "1.0.0"
]
@output @utilsFile to "/tmp/bundle-test/utils.mld"

/var @featureFile = [[
/import { helper2 } from "./utils.mld"

/exe @feature() = js {(
  console.log("Feature activated");
  return @helper2();
)}
]
@output @featureFile to "/tmp/bundle-test/feature.mld"

## Test bundle function
/var @bundled = @bundle("/tmp/bundle-test/main.mld")
/var @test_bundle_returns_string = @ok(typeof @bundled === "string")
/var @test_bundle_has_content = @includes(@bundled, "Hello from main")
/var @test_bundle_has_imports = @includes(@bundled, "@import")

## Test bundleWithDeps (should inline dependencies)
/var @bundledWithDeps = @bundleWithDeps("/tmp/bundle-test/main.mld")
/var @test_bundleWithDeps_returns_string = @ok(typeof @bundledWithDeps === "string")
/var @test_bundleWithDeps_has_main = @includes(@bundledWithDeps, "Hello from main")
/var @test_bundleWithDeps_has_helper1 = @includes(@bundledWithDeps, "Helper 1 called")
/var @test_bundleWithDeps_has_feature = @includes(@bundledWithDeps, "Feature activated")
/var @test_bundleWithDeps_has_utils_version = @includes(@bundledWithDeps, "1.0.0")

## Test analyze function
/var @analysis = @analyze("/tmp/bundle-test/main.mld")
/var @test_analyze_returns_object = @ok(typeof @analysis === "object")
/var @test_analyze_has_imports = @ok(@analysis.imports)
/var @test_analyze_has_exports = @ok(@analysis.exports !== undefined)
/var @test_analyze_has_dependencies = @ok(@analysis.dependencies)

>>  Check specific analysis results
/var @test_analyze_imports_count = @ok(@analysis.imports.length >= 2)
/var @test_analyze_has_utils_dep = @includes(@analysis.dependencies, "./utils.mld")
/var @test_analyze_has_feature_dep = @includes(@analysis.dependencies, "./feature.mld")

## Test tree function (dependency tree)
/var @depTree = @tree("/tmp/bundle-test/main.mld")
/var @test_tree_returns_object = @ok(typeof @depTree === "object")
/var @test_tree_has_name = @eq(@depTree.name, "main.mld")
/var @test_tree_has_children = @ok(Array.isArray(@depTree.children))
/var @test_tree_children_count = @ok(@depTree.children.length >= 2)

>>  Check tree structure
/var @utilsChild = @depTree.children.find(c => c.name === "utils.mld")
/var @featureChild = @depTree.children.find(c => c.name === "feature.mld")
/var @test_tree_has_utils_child = @ok(@utilsChild)
/var @test_tree_has_feature_child = @ok(@featureChild)

>>  Feature should also depend on utils
/var @test_feature_has_deps = @ok(@featureChild && @featureChild.children.length > 0)

## Test with circular dependencies
/var @circular1 = [[
/import { func2 } from "./circular2.mld"
/exe @func1() = js {(return "func1")}
]
@output @circular1 to "/tmp/bundle-test/circular1.mld"

/var @circular2 = [[
/import { func1 } from "./circular1.mld"
/exe @func2() = js {(return "func2")}
]
@output @circular2 to "/tmp/bundle-test/circular2.mld"

>>  Analyze circular dependencies
/var @circularAnalysis = @analyze("/tmp/bundle-test/circular1.mld")
/var @test_circular_detected = @ok(@circularAnalysis.hasCircularDeps || @circularAnalysis.dependencies.length > 0)

## Test with non-existent file handling
/var @test_bundle_function_exists = @ok(@bundle)
/var @test_bundleWithDeps_function_exists = @ok(@bundleWithDeps)
/var @test_analyze_function_exists = @ok(@analyze)
/var @test_tree_function_exists = @ok(@tree)

>>  Cleanup
@run [(rm -rf /tmp/bundle-test)}