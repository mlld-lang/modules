>> Tests for @mlld/log module

/import { ok, eq, deepEq } from @local/test
/import { log, logVerbose, logJson } from @local/pipelog

## Test basic logging functions exist
/var @test_log_exists = @ok(@log)
/var @test_logVerbose_exists = @ok(@logVerbose)
/var @test_logJson_exists = @ok(@logJson)

## Test function types
/exe @isFunction(@val) = js { return typeof val === "function"; }
/var @test_log_is_function = @ok(@isFunction(@log))
/var @test_logVerbose_is_function = @ok(@isFunction(@logVerbose))
/var @test_logJson_is_function = @ok(@isFunction(@logJson))

## Test pass-through behavior (all log functions return input unchanged)
/var @testString = "Test message"
/var @logResult = @log(@testString)
/var @test_log_returns_input = @eq(@logResult, @testString)

/var @testData = {"name": "test", "values": [1, 2, 3]}
/var @logDataResult = @log(@testData)
/var @test_log_returns_complex_data = @deepEq(@logDataResult, @testData)

/var @verboseResult = @logVerbose(@testString)
/var @test_logVerbose_returns_input = @eq(@verboseResult, @testString)

/var @jsonResult = @logJson(@testData)
/var @test_logJson_returns_input = @deepEq(@jsonResult, @testData)

## Test pipeline usage
/var @pipelineResult = @testString | @log | @logVerbose | @logJson
/var @test_pipeline_preserves_data = @eq(@pipelineResult, @testString)