# Tests for @mlld/ai module

@import { eq, ok, notOk, includes, deepEq } from @local/test
@import { complete, embed, generateImage, transcribe, vision, models } from @local/ai

# Note: These tests verify the AI module functions exist and have correct signatures
# Actual AI API calls would require API keys and incur costs, so we test structure only

## Test that all main functions exist
@data test_complete_exists = @ok(@complete)
@data test_embed_exists = @ok(@embed)
@data test_generateImage_exists = @ok(@generateImage)
@data test_transcribe_exists = @ok(@transcribe)
@data test_vision_exists = @ok(@vision)
@data test_models_exists = @ok(@models)

## Test models structure
@data test_models_is_object = @ok(typeof @models === "object")
@data test_models_has_gpt4 = @ok(@models.gpt4)
@data test_models_has_gpt35 = @ok(@models.gpt35)
@data test_models_has_claude = @ok(@models.claude)
@data test_models_has_embedding = @ok(@models.embedding)
@data test_models_has_whisper = @ok(@models.whisper)
@data test_models_has_dalle = @ok(@models.dalle)

## Test model name values
@data test_gpt4_model_name = @eq(@models.gpt4, "gpt-4")
@data test_gpt35_model_name = @eq(@models.gpt35, "gpt-3.5-turbo")
@data test_claude_model_name = @eq(@models.claude, "claude-3-opus-20240229")
@data test_embedding_model_name = @eq(@models.embedding, "text-embedding-3-small")
@data test_whisper_model_name = @eq(@models.whisper, "whisper-1")
@data test_dalle_model_name = @eq(@models.dalle, "dall-e-3")

## Test function signatures (by checking they're functions)
@data test_complete_is_function = @eq(typeof @complete, "function")
@data test_embed_is_function = @eq(typeof @embed, "function")
@data test_generateImage_is_function = @eq(typeof @generateImage, "function")
@data test_transcribe_is_function = @eq(typeof @transcribe, "function")
@data test_vision_is_function = @eq(typeof @vision, "function")

# Test that we can create mock calls (without actually calling APIs)
# This verifies the parameter structure is correct

## Test complete parameters
@exec mockComplete() = javascript [(
  // Test that complete can be called with proper parameters
  const prompt = "Test prompt";
  const options = {
    model: "gpt-4",
    temperature: 0.7,
    max_tokens: 100
  };
  // Would call: @complete(prompt, options)
  return true;
)]
@data test_complete_params = @ok(@mockComplete())

## Test embed parameters
@exec mockEmbed() = javascript [(
  // Test embed parameter structure
  const text = "Text to embed";
  const options = {
    model: "text-embedding-3-small"
  };
  // Would call: @embed(text, options)
  return true;
)]
@data test_embed_params = @ok(@mockEmbed())

## Test generateImage parameters
@exec mockGenerateImage() = javascript [(
  // Test generateImage parameter structure
  const prompt = "A beautiful sunset";
  const options = {
    model: "dall-e-3",
    size: "1024x1024",
    quality: "standard"
  };
  // Would call: @generateImage(prompt, options)
  return true;
)]
@data test_generateImage_params = @ok(@mockGenerateImage())

## Test vision parameters
@exec mockVision() = javascript [(
  // Test vision parameter structure
  const imageUrl = "https://example.com/image.jpg";
  const prompt = "What's in this image?";
  const options = {
    model: "gpt-4-vision-preview"
  };
  // Would call: @vision(imageUrl, prompt, options)
  return true;
)]
@data test_vision_params = @ok(@mockVision())

## Test transcribe parameters
@exec mockTranscribe() = javascript [(
  // Test transcribe parameter structure
  const audioPath = "/path/to/audio.mp3";
  const options = {
    model: "whisper-1",
    language: "en"
  };
  // Would call: @transcribe(audioPath, options)
  return true;
)]
@data test_transcribe_params = @ok(@mockTranscribe())