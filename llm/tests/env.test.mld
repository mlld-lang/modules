> Testing @mlld/env module

/import { ok, notOk, eq, deepEq, contains, throws, len, gt, gte } from @local/test
/import { env } from @local/env

## Testing module structure

>> Verify env object exists and has expected methods
/var @test_env_exists = @ok(@env)
/var @test_has_validate = @ok(@env.validate)
/var @test_has_require = @ok(@env.require)
/var @test_has_get = @ok(@env.get)
/var @test_has_getAll = @ok(@env.getAll)
/var @test_has_mask = @ok(@env.mask)
/var @test_has_exists = @ok(@env.exists)
/var @test_has_isCI = @ok(@env.isCI)
/var @test_has_ciProvider = @ok(@env.ciProvider)
/var @test_has_load = @ok(@env.load)
/var @test_has_export = @ok(@env.export)

## Testing validate function

>> Test validate with single variable that exists
/exe @setTestEnv() = js { process.env.TEST_VAR_EXISTS = "test-value"; process.env.TEST_VAR_EMPTY = ""; }
/run @setTestEnv()

/var @validateSingle = @env.validate("TEST_VAR_EXISTS")
/var @test_validate_single_valid = @ok(@validateSingle.valid)
/var @test_validate_single_checked = @eq(@validateSingle.checked, 1)
/var @test_validate_single_found = @eq(@validateSingle.found, 1)
/var @test_validate_single_missing_empty = @deepEq(@validateSingle.missing, [])
/var @test_validate_single_summary = @contains(@validateSingle.summary, "✅")

>> Test validate with single variable that doesn't exist
/var @validateMissing = @env.validate("DEFINITELY_DOES_NOT_EXIST_VAR_123")
/var @test_validate_missing_invalid = @notOk(@validateMissing.valid)
/var @test_validate_missing_checked = @eq(@validateMissing.checked, 1)
/var @test_validate_missing_found = @eq(@validateMissing.found, 0)
/var @test_validate_missing_has_missing = @eq(@len(@validateMissing.missing), 1)
/var @test_validate_missing_summary = @contains(@validateMissing.summary, "❌")

>> Test validate with multiple variables
/exe @setMoreTestEnvs() = js { 
  process.env.TEST_VAR_1 = "value1"; 
  process.env.TEST_VAR_2 = "value2";
  delete process.env.TEST_VAR_3;
}
/run @setMoreTestEnvs()

/var @validateMultiple = @env.validate(["TEST_VAR_1", "TEST_VAR_2", "TEST_VAR_3"])
/var @test_validate_multi_invalid = @notOk(@validateMultiple.valid)
/var @test_validate_multi_checked = @eq(@validateMultiple.checked, 3)
/var @test_validate_multi_found = @eq(@validateMultiple.found, 2)
/var @test_validate_multi_missing_count = @eq(@len(@validateMultiple.missing), 1)
/var @test_validate_multi_missing_name = @eq(@validateMultiple.missing[0], "TEST_VAR_3")

>> Test validate with empty string variable (should be invalid)
/var @validateEmpty = @env.validate("TEST_VAR_EMPTY")
/var @test_validate_empty_invalid = @notOk(@validateEmpty.valid)
/var @test_validate_empty_found = @eq(@validateEmpty.found, 0)

## Testing require function

>> Test require with existing variable
/var @requireExisting = @env.require("TEST_VAR_EXISTS")
/var @test_require_existing_returns_true = @eq(@requireExisting, "true")

>> Test require with missing variable (returns empty string after showing error)
/var @requireMissing = @env.require("MISSING_REQUIRED_VAR")
/var @test_require_missing_returns_empty = @eq(@requireMissing, "")

## Testing get function

>> Test get with existing variable
/var @getExisting = @env.get("TEST_VAR_EXISTS")
/var @test_get_existing = @eq(@getExisting, "test-value")

>> Test get with fallback
/var @getWithFallback = @env.get("DOES_NOT_EXIST", "fallback-value")
/var @test_get_fallback = @eq(@getWithFallback, "fallback-value")

>> Test get without fallback (returns empty string)
/var @getNoFallback = @env.get("DOES_NOT_EXIST")
/var @test_get_no_fallback = @eq(@getNoFallback, "")

## Testing getAll function

>> Test getAll with multiple variables
/var @getAllResult = @env.getAll(["TEST_VAR_1", "TEST_VAR_2", "MISSING_VAR"])
/var @test_getAll_var1 = @eq(@getAllResult.TEST_VAR_1, "value1")
/var @test_getAll_var2 = @eq(@getAllResult.TEST_VAR_2, "value2")
/var @test_getAll_missing = @eq(@getAllResult.MISSING_VAR, "")

>> Test getAll returns object with all requested keys
/exe @hasKeys(@obj, @keys) = js {
  const keyList = Array.isArray(keys) ? keys : [keys];
  return keyList.every(key => obj.hasOwnProperty(key)) ? "true" : "";
}
/var @test_getAll_has_all_keys = @ok(@hasKeys(@getAllResult, ["TEST_VAR_1", "TEST_VAR_2", "MISSING_VAR"]))

## Testing mask function

>> Test mask with long values
/var @longValue = "abcdefghijklmnop"
/var @maskedLong = @env.mask(@longValue)
/var @test_mask_long = @eq(@maskedLong, "abc***nop")

>> Test mask with short values
/var @shortValue = "secret"
/var @maskedShort = @env.mask(@shortValue)
/var @test_mask_short = @eq(@maskedShort, "***")

>> Test mask with empty value
/var @maskedEmpty = @env.mask("")
/var @test_mask_empty = @eq(@maskedEmpty, "***")

>> Test mask with exact 8 characters
/var @exact8 = "12345678"
/var @masked8 = @env.mask(@exact8)
/var @test_mask_8chars = @eq(@masked8, "123***678")

## Testing exists function

>> Test exists with existing variable
/var @existsTrue = @env.exists("TEST_VAR_EXISTS")
/var @test_exists_true = @eq(@existsTrue, "true")

>> Test exists with non-existing variable
/var @existsFalse = @env.exists("DEFINITELY_MISSING_VAR")
/var @test_exists_false = @eq(@existsFalse, "")

## Testing CI detection functions

>> Test isCI function
/var @isInCI = @env.isCI()
>> This will return empty string in local development, "true" in CI
/var @test_isCI_returns_value = @ok(@isInCI == "" || @isInCI == "true")

>> Test ciProvider function
/var @provider = @env.ciProvider()
>> Should return a string (either CI provider name or "Not in CI")
/var @test_ciProvider_returns_string = @ok(@provider)
/var @test_ciProvider_not_empty = @gt(@len(@provider), 0)

## Testing edge cases

>> Test validate with empty array
/var @validateEmptyArray = @env.validate([])
/var @test_validate_empty_array_valid = @ok(@validateEmptyArray.valid)
/var @test_validate_empty_array_checked = @eq(@validateEmptyArray.checked, 0)
/var @test_validate_empty_array_summary = @contains(@validateEmptyArray.summary, "✅ All 0")

>> Test with special characters in env var names
/exe @setSpecialEnv() = js { process.env["TEST_VAR-WITH-DASH"] = "dash-value"; }
/run @setSpecialEnv()
/var @specialGet = @env.get("TEST_VAR-WITH-DASH")
/var @test_special_char_env = @eq(@specialGet, "dash-value")

## Testing export function

>> Note: export runs in a subshell, so exported vars won't be visible to parent process
>> Just test that the function executes without error
/var @exportResult = run {@env.export("NEW_EXPORTED_VAR", "exported-value")}
/var @test_export_runs = @contains(@exportResult, "✅ Exported NEW_EXPORTED_VAR")

## Testing complex validation scenarios

>> Test validation results structure
/var @complexValidation = @env.validate(["TEST_VAR_1", "MISSING_1", "TEST_VAR_2", "MISSING_2"])
/var @test_complex_checked = @eq(@complexValidation.checked, 4)
/var @test_complex_found = @eq(@complexValidation.found, 2)
/var @test_complex_missing_count = @eq(@len(@complexValidation.missing), 2)
/var @test_complex_has_results = @ok(@complexValidation.results)
/var @test_complex_results_length = @eq(@len(@complexValidation.results), 4)

>> Verify results array structure
/var @firstResult = @complexValidation.results[0]
/var @test_result_has_name = @ok(@firstResult.name)
/var @test_result_has_exists = @ok(@firstResult.exists == true || @firstResult.exists == false)
/var @test_result_has_length = @gte(@firstResult.length, 0)

## Function type validation

>> Verify all functions are callable
/exe @isFunction(@val) = js { return typeof val === 'function' ? "true" : ""; }

/var @test_validate_is_function = @ok(@isFunction(@env.validate))
/var @test_require_is_function = @ok(@isFunction(@env.require))
/var @test_get_is_function = @ok(@isFunction(@env.get))
/var @test_getAll_is_function = @ok(@isFunction(@env.getAll))
/var @test_mask_is_function = @ok(@isFunction(@env.mask))
/var @test_exists_is_function = @ok(@isFunction(@env.exists))
/var @test_isCI_is_function = @ok(@isFunction(@env.isCI))
/var @test_ciProvider_is_function = @ok(@isFunction(@env.ciProvider))
/var @test_load_is_function = @ok(@isFunction(@env.load))
/var @test_export_is_function = @ok(@isFunction(@env.export))

## Cleanup test environment variables

/exe @cleanupTestEnvs() = js {
  delete process.env.TEST_VAR_EXISTS;
  delete process.env.TEST_VAR_EMPTY;
  delete process.env.TEST_VAR_1;
  delete process.env.TEST_VAR_2;
  delete process.env["TEST_VAR-WITH-DASH"];
}
/run @cleanupTestEnvs()