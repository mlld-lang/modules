>> Tests for @mlld/array module

/import { ok, eq, deepEq } from @local/test
/import { filter, length, pluck, find, includes, sortBy, groupBy, range, first, last, slice, reverse, sum, avg, unique } from @local/array

## Test filter
/var @items = [
  {"name": "apple", "price": 1.50, "category": "fruit"},
  {"name": "banana", "price": 0.75, "category": "fruit"},
  {"name": "carrot", "price": 2.00, "category": "vegetable"}
]

/var @fruits = @filter(@items, "category", "fruit")
/var @test_filter_returns_array = @ok(Array.isArray(@fruits))
/var @test_filter_correct_length = @eq(@length(@fruits), 2)
/var @test_filter_correct_items = @deepEq(@pluck(@fruits, "name"), ["apple", "banana"])

>> Test filter with empty array
/var @emptyResult = @filter([], "key", "value")
/var @test_filter_empty_array = @deepEq(@emptyResult, [])

## Test map (commented out - function not implemented)
>> /exe @double(@n) = js {return n * 2}
/var @numbers = [1, 2, 3, 4, 5]
>> /var @doubled = @map(@numbers, @double)
>> /var @test_map_doubles_numbers = @deepEq(@doubled, [2, 4, 6, 8, 10])

>> Test map with objects (commented out - function not implemented)
>> /exe @getName(@obj) = js {return obj.name}
>> /var @names = @map(@items, @getName)
>> /var @test_map_extracts_names = @deepEq(@names, ["apple", "banana", "carrot"])

## Test reduce (commented out - function not implemented)
>> /exe @sumReducer(@acc, @val) = js {return acc + val}
>> /var @sumResult = @reduce(@numbers, @sumReducer, 0)
>> /var @test_reduce_sum = @eq(@sumResult, 15)

>> Test reduce with object accumulator (commented out - function not implemented)
>> /exe @countByCategory(@acc, @item) = js {
>>   acc[item.category] = (acc[item.category] || 0) + 1;
>>   return acc;
>> }
>> /var @categoryCounts = @reduce(@items, @countByCategory, {})
>> /var @test_reduce_counts = @deepEq(@categoryCounts, {"fruit": 2, "vegetable": 1})

## Test sum
/var @priceSum = @sum(@items, "price")
/var @test_sum_prices = @eq(@priceSum, 4.25)

>> Test sum with array of numbers
/var @numberSum = @sum(@numbers)
/var @test_sum_numbers = @eq(@numberSum, 15)

## Test avg (mean renamed to avg in module)
/var @priceMean = @avg(@items, "price")
/exe @checkPriceMean(@val) = js { return val > 1.41 && val < 1.42; }
/var @test_mean_prices = @ok(@checkPriceMean(@priceMean))  >> ~1.416667

>> Test avg with array of numbers (commented out - needs array of numbers)
>> /var @numberMean = @avg(@numbers)
>> /var @test_mean_numbers = @eq(@numberMean, 3)

## Test pluck
/var @categories = @pluck(@items, "category")
/var @test_pluck_categories = @deepEq(@categories, ["fruit", "fruit", "vegetable"])

>> Test pluck with missing field
/var @missing = @pluck(@items, "nonexistent")
/var @test_pluck_missing = @deepEq(@missing, [undefined, undefined, undefined])

## Test includes (array version)
/var @hasApple = @includes(@pluck(@items, "name"), "apple")
/var @test_includes_found = @ok(@hasApple)

/var @hasOrange = @includes(@pluck(@items, "name"), "orange")
/var @test_includes_not_found = @ok(!@hasOrange)

## Test unique
/var @duplicates = ["a", "b", "a", "c", "b", "d"]
/var @uniqueItems = @unique(@duplicates)
/var @test_unique_removes_duplicates = @deepEq(@uniqueItems, ["a", "b", "c", "d"])

>> Test unique with numbers
/var @numberDupes = [1, 2, 3, 2, 4, 3, 5]
/var @uniqueNumbers = @unique(@numberDupes)
/var @test_unique_numbers = @deepEq(@uniqueNumbers, [1, 2, 3, 4, 5])

## Test flatten (commented out - function not implemented)
>> /var @nested = [[1, 2], [3, 4], [5]]
>> /var @flat = @flatten(@nested)
>> /var @test_flatten_simple = @deepEq(@flat, [1, 2, 3, 4, 5])

>> Test flatten with mixed nesting (commented out - function not implemented)
>> /var @mixedNested = [1, [2, 3], [[4]], 5]
>> /var @mixedFlat = @flatten(@mixedNested)
>> /var @test_flatten_mixed = @deepEq(@mixedFlat, [1, 2, 3, [4], 5])

## Test groupBy
/var @grouped = @groupBy(@items, "category")
/var @test_groupBy_has_fruit = @ok(@grouped.fruit)
/var @test_groupBy_has_vegetable = @ok(@grouped.vegetable)
/var @test_groupBy_fruit_count = @eq(@length(@grouped.fruit), 2)
/var @test_groupBy_vegetable_count = @eq(@length(@grouped.vegetable), 1)