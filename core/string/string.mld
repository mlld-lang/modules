---
name: string
description: 
author: adamavenir
mlld-version: 1.0.0-rc-12
---

>> Basic string operations
@exec length(str) = @run js [(String(str).length)]
@exec trim(str) = @run js [(String(str).trim())]
@exec trimStart(str) = @run js [(String(str).trimStart())]
@exec trimEnd(str) = @run js [(String(str).trimEnd())]

>> Case transformations
@exec upper(str) = @run js [(String(str).toUpperCase())]
@exec lower(str) = @run js [(String(str).toLowerCase())]
@exec capitalize(str) = @run js [(
  const s = String(str);
  s.charAt(0).toUpperCase() + s.slice(1).toLowerCase()
)]
@exec title(str) = @run js [(
  String(str).split(' ').map(word => 
    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
  ).join(' ')
)]
@exec camelCase(str) = @run js [(
  String(str)
    .replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase())
    .replace(/^[A-Z]/, chr => chr.toLowerCase())
)]
@exec snakeCase(str) = @run js [(
  String(str)
    .replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)
    .replace(/^_/, '')
    .replace(/[^a-zA-Z0-9]+/g, '_')
    .toLowerCase()
)]
@exec kebabCase(str) = @run js [(
  String(str)
    .replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`)
    .replace(/^-/, '')
    .replace(/[^a-zA-Z0-9]+/g, '-')
    .toLowerCase()
)]

>> String splitting and joining
@exec split(str, separator) = @run js [(JSON.stringify(String(str).split(separator || '')))]
@exec splitLines(str) = @run js [(JSON.stringify(String(str).split(/\r?\n/)))]
@exec splitWords(str) = @run js [(JSON.stringify(String(str).match(/\S+/g) || []))]
@exec join(array, separator) = @run js [(Array.isArray(array) ? array.join(separator || '') : String(array))]
@exec joinLines(array) = @run js [(Array.isArray(array) ? array.join('\n') : String(array))]

>> Substring operations
@exec substring(str, start, end) = @run js [(String(str).substring(start, end))]
@exec slice(str, start, end) = @run js [(String(str).slice(start, end))]
@exec left(str, n) = @run js [(String(str).slice(0, n))]
@exec right(str, n) = @run js [(String(str).slice(-n))]
@exec mid(str, start, length) = @run js [(String(str).substr(start, length))]

>> Search and replace
@exec indexOf(str, search) = @run js [(String(str).indexOf(search))]
@exec lastIndexOf(str, search) = @run js [(String(str).lastIndexOf(search))]
@exec includes(str, search) = @run js [(String(str).includes(search) ? "true" : "")]
@exec startsWith(str, search) = @run js [(String(str).startsWith(search) ? "true" : "")]
@exec endsWith(str, search) = @run js [(String(str).endsWith(search) ? "true" : "")]
@exec replace(str, search, replacement) = @run js [(String(str).replace(search, replacement))]
@exec replaceAll(str, search, replacement) = @run js [(String(str).replaceAll(search, replacement))]
@exec replaceRegex(str, pattern, replacement) = @run js [(String(str).replace(new RegExp(pattern, 'g'), replacement))]

>> Padding and formatting
@exec padStart(str, length, padChar) = @run js [(String(str).padStart(length, padChar || ' '))]
@exec padEnd(str, length, padChar) = @run js [(String(str).padEnd(length, padChar || ' '))]
@exec center(str, length, padChar) = @run js [(
  const s = String(str);
  const pad = padChar || ' ';
  const totalPad = Math.max(0, length - s.length);
  const padLeft = Math.floor(totalPad / 2);
  const padRight = totalPad - padLeft;
  pad.repeat(padLeft) + s + pad.repeat(padRight)
)]
@exec repeat(str, count) = @run js [(String(str).repeat(count))]

>> Character operations
@exec charAt(str, index) = @run js [(String(str).charAt(index))]
@exec reverse(str) = @run js [(String(str).split('').reverse().join(''))]

>> Validation and checking
@exec isEmpty(str) = @run js [(String(str).length === 0 ? "true" : "")]
@exec isBlank(str) = @run js [(String(str).trim().length === 0 ? "true" : "")]
@exec isNumeric(str) = @run js [(!isNaN(str) && !isNaN(parseFloat(str)) ? "true" : "")]
@exec isAlpha(str) = @run js [(/^[a-zA-Z]+$/.test(String(str)) ? "true" : "")]
@exec isAlphanumeric(str) = @run js [(/^[a-zA-Z0-9]+$/.test(String(str)) ? "true" : "")]

>> Encoding and escaping
@exec escape(str) = @run js [(
  String(str)
    .replace(/\\/g, '\\\\')
    .replace(/"/g, '\\"')
    .replace(/'/g, "\\'")
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\t/g, '\\t')
)]
@exec unescape(str) = @run js [(
  String(str)
    .replace(/\\n/g, '\n')
    .replace(/\\r/g, '\r')
    .replace(/\\t/g, '\t')
    .replace(/\\'/g, "'")
    .replace(/\\"/g, '"')
    .replace(/\\\\/g, '\\')
)]
@exec encodeUri(str) = @run js [(encodeURI(String(str)))]
@exec decodeUri(str) = @run js [(decodeURI(String(str)))]
@exec encodeUriComponent(str) = @run js [(encodeURIComponent(String(str)))]
@exec decodeUriComponent(str) = @run js [(decodeURIComponent(String(str)))]

>> Template operations
@exec template(template, data) = @run js [(
  String(template).replace(/\{\{(\w+)\}\}/g, (match, key) => 
    data && data[key] !== undefined ? data[key] : match
  )
)]

>> Clean API export
@data module = {
  >> Basic operations
  length: @length,
  trim: @trim,
  trimStart: @trimStart,
  trimEnd: @trimEnd,
  
  >> Case transformations
  upper: @upper,
  lower: @lower,
  capitalize: @capitalize,
  title: @title,
  camelCase: @camelCase,
  snakeCase: @snakeCase,
  kebabCase: @kebabCase,
  
  >> Splitting and joining
  split: @split,
  splitLines: @splitLines,
  splitWords: @splitWords,
  join: @join,
  joinLines: @joinLines,
  
  >> Substring operations
  substring: @substring,
  slice: @slice,
  left: @left,
  right: @right,
  mid: @mid,
  
  >> Search and replace
  indexOf: @indexOf,
  lastIndexOf: @lastIndexOf,
  includes: @includes,
  startsWith: @startsWith,
  endsWith: @endsWith,
  replace: @replace,
  replaceAll: @replaceAll,
  replaceRegex: @replaceRegex,
  
  >> Padding and formatting
  padStart: @padStart,
  padEnd: @padEnd,
  center: @center,
  repeat: @repeat,
  
  >> Character operations
  charAt: @charAt,
  reverse: @reverse,
  
  >> Validation
  isEmpty: @isEmpty,
  isBlank: @isBlank,
  isNumeric: @isNumeric,
  isAlpha: @isAlpha,
  isAlphanumeric: @isAlphanumeric,
  
  >> Encoding
  escape: @escape,
  unescape: @unescape,
  encodeUri: @encodeUri,
  decodeUri: @decodeUri,
  encodeUriComponent: @encodeUriComponent,
  decodeUriComponent: @decodeUriComponent,
  
  >> Templates
  template: @template
}